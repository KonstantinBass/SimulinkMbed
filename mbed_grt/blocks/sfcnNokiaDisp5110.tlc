%% File : sfcnUart.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for sfcnUart
%%
%% Simulink version      : 8.3 (R2014a) 27-Dec-2013
%% TLC file generated on : 20-Feb-2015 16:05:50

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'sfcnUart';
     def.OutputFcnSpec = 'double y1 = dummy(int8 p1,int8 p2,int8 p3)';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
 %/

%implements sfcnNokiaDisp5110 "C"

%include "mbed_block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% Ensure required header files are included and C++ mode is on
    %<MbedCommonBlockTypeSetup(block, system)>
    %<LibAddToModelSources("N5110.cpp")>
    %if !SLibCodeGenForSim()
      %% ONLY C++!
      %% In C++ we can use classes directly
      %<LibAddToCommonIncludes("N5110.h")> 
      %%<SLibAddToStaticSources("%<file>/libraries/MAX6675/max6675.cpp")>
      %<SLibAddToStaticSources("N5110.cpp")>
    %endif
  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
  %if !EXISTS(::MbedN5110)
    %createrecord ::MbedN5110 { MbedN5110Cnt 0; CreateClass TLC_TRUE }
  %endif
%%breakpoint  
  %assign NumPrt    = SFcnParamSettings.numPorts   
  %assign tagSpi    = SFcnParamSettings.tagSpi 
  %assign pinVcc    = SFcnParamSettings.VCC  
  %assign pinSce    = SFcnParamSettings.SCE   
  %assign pinRst    = SFcnParamSettings.RST 
  %assign pinDc     = SFcnParamSettings.DC              
  %assign pinLed    = SFcnParamSettings.LED  

  %addtorecord :: MbedN5110 N5110 {numPorts NumPrt; SPI tagSpi; VCC pinVcc; SCE pinSce; RST pinRst; DC pinDc; LED pinLed}
  %assign :: MbedN5110.MbedN5110Cnt = ::MbedN5110.MbedN5110Cnt + 1

%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%breakpoint
  %assign NumPrt    = SFcnParamSettings.numPorts  
  %assign tagSpi    = SFcnParamSettings.tagSpi
  %assign pinVcc    = SFcnParamSettings.VCC  
  %assign pinSce    = SFcnParamSettings.SCE   
  %assign pinRst    = SFcnParamSettings.RST 
  %assign pinDc     = SFcnParamSettings.DC         
  %assign pinLed    = SFcnParamSettings.LED 

  %% Tmp Vars in Definitions 
  %if !SLibCodeGenForSim()       
      %assign modelC = LibGetModelDotCFile() 
      %openfile tmpBuf
//Tmp Vars for %<block.Identifier> Block
char %<block.Identifier>Buf[14];
int %<block.Identifier>StrLng;
      %closefile tmpBuf
      %<LibSetSourceFileSection(modelC, "Definitions", tmpBuf)>
  %endif

  %if !SLibCodeGenForSim()      
      %assign modelC = LibGetModelDotCFile() 
      %openfile tmpBuf
// VCC, SCE, RST, D/C, LED, *SPI
N5110 %<block.Identifier>(%<pinVcc>, %<pinSce>, %<pinRst>, %<pinDc>, %<pinLed>, %<tagSpi>Ptr);
// Can also power (VCC) directly from VOUT (3.3 V) -
// Can give better performance due to current limitation from GPIO pin
      %closefile tmpBuf
      %% SPI is in "Definitions" -> N5110 to "Declarations"
      %<LibSetSourceFileSection(modelC, "Declarations", tmpBuf)>
      
      %%InitProzesse
      %%openfile tmpBufInit
// first need to initialise display
%<block.Identifier>.init();
// normal colour mode
%<block.Identifier>.normalMode();
// put LED backlight on 0.5      
%<block.Identifier>.setBrightness(0.5); 
      %%closefile tmpBufInit
      %%<LibSetSourceFileSection(modelC, "Declarations", tmpBufInit)>
  %endif
  %%

%endfunction


%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
   
%if !SLibCodeGenForSim()
  %assign NumPrt    = SFcnParamSettings.numPorts  
  %assign Z1        = SFcnParamSettings.FormatZ1
  %assign Z2        = SFcnParamSettings.FormatZ2
  %assign Z3        = SFcnParamSettings.FormatZ3
  %assign Z4        = SFcnParamSettings.FormatZ4
  %assign Z5        = SFcnParamSettings.FormatZ5 
  %assign tagSpi    = SFcnParamSettings.tagSpi
  %assign pinVcc    = SFcnParamSettings.VCC  
  %assign pinSce    = SFcnParamSettings.SCE   
  %assign pinRst    = SFcnParamSettings.RST 
  %assign pinDc     = SFcnParamSettings.DC             
  %assign pinLed    = SFcnParamSettings.LED 
 %%breakpoint
   %if NumPrt == 0
     %<block.Identifier>.printString("%<MsgFormat>",0,0);
   %else
     %foreach i = NumPrt
       %%Port 1
       %if (i == 0) & !(WHITE_SPACE(Z1))
         %assign arg = LibBlockInputSignal(i, "", "", 0)
         //Ausgabe Zeile 1
         %<block.Identifier>StrLng = sprintf(%<block.Identifier>Buf,"%<Z1>",%<arg>);
         %<block.Identifier>.printString(%<block.Identifier>Buf,0,%<i>);
       %endif
       %%Port 2
       %if (i == 1) & !(WHITE_SPACE(Z2))
         //Ausgabe Zeile 2
         %assign arg = LibBlockInputSignal(i, "", "", 0)
         %<block.Identifier>StrLng = sprintf(%<block.Identifier>Buf,"%<Z2>",%<arg>);
         %<block.Identifier>.printString(%<block.Identifier>Buf,0,%<i>);
       %endif

       %%Port 3
       %if (i == 2) & !(WHITE_SPACE(Z3))
         //Ausgabe Zeile 3
         %assign arg = LibBlockInputSignal(i, "", "", 0)
         %<block.Identifier>StrLng = sprintf(%<block.Identifier>Buf,"%<Z3>",%<arg>);
         %<block.Identifier>.printString(%<block.Identifier>Buf,0,%<i>);
       %endif

       %%Port 4
       %if (i == 3) & !(WHITE_SPACE(Z4))
         //Ausgabe Zeile 4
         %assign arg = LibBlockInputSignal(i, "", "", 0)
         %<block.Identifier>StrLng = sprintf(%<block.Identifier>Buf,"%<Z4>",%<arg>);
         %<block.Identifier>.printString(%<block.Identifier>Buf,0,%<i>);
       %endif

       %%Port 5
       %if (i == 4) & !(WHITE_SPACE(Z5))
         //Ausgabe Zeile 5
         %assign arg = LibBlockInputSignal(i, "", "", 0)
         %<block.Identifier>StrLng = sprintf(%<block.Identifier>Buf,"%<Z5>",%<arg>);
         %<block.Identifier>.printString(%<block.Identifier>Buf,0,%<i>);
       %endif

    %endforeach
   %endif     
%endif
  %%
%endfunction

%% [EOF]
