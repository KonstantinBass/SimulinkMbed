%% File : sfcnMax6675.tlc
%%
%% Description: 
%%   Simulink Coder TLC Code Generation file for sfcnMax6675
%%
%% Simulink version      : 8.3 (R2014a) 27-Dec-2013
%% TLC file generated on : 20-Feb-2015 16:05:50


%implements sfcnServo "C"

%include "mbed_block_common_includes.tlc"

%% Function: BlockTypeSetup ===============================================
%%
%function BlockTypeSetup(block, system) void
  %%
  %% Ensure required header files are included and C++ mode is on
    %<MbedCommonBlockTypeSetup(block, system)>
   
    %<LibAddToModelSources("Servo.cpp")>
    %if !SLibCodeGenForSim()
      %% ONLY C++!
      %% In C++ we can use classes directly
      %<LibAddToCommonIncludes("Servo.h")> 
      %% Get Arduino install path
      %%assign file = FEVAL("arduino_ec.Prefs.getArduinoPath")
      %%<SLibAddToStaticSources("%<file>/libraries/MAX6675/max6675.cpp")>
      %<SLibAddToStaticSources("Servo.cpp")>
    %endif
  %%
%endfunction

%% Function: BlockInstanceSetup ===========================================
%%
%function BlockInstanceSetup(block, system) void
  %%
  %<LibBlockSetIsExpressionCompliant(block)>
  %%
  %if !EXISTS(::MbedServoConf)
    %createrecord ::MbedServoConf { MbedServoCnt 0; CreateClass TLC_TRUE }
  %endif
%%breakpoint  
  %%assign pin1 = LibBlockParameterString(P1)
  %%assign pin1 = LibBlockParameter(P1, "", "", 0)numPorts bufferSize Format
  %assign pinSrv       = SFcnParamSettings.pinServo
  
  %addtorecord :: MbedServoConf Servo {PinServo pinSrv}
  %assign :: MbedServoConf.MbedServoCnt = ::MbedServoConf.MbedServoCnt + 1
%endfunction

%% Function: Start ========================================================
%%
%function Start(block, system) Output
  %%breakpoint
  %assign pinSrv       = SFcnParamSettings.pinServo 

  %if !SLibCodeGenForSim()      
      %assign modelC = LibGetModelDotCFile() 
      %%
      %openfile tmpBuf
      
    //------------------------------------
    // Configurate Servo Motor %<block.Identifier> 
    //------------------------------------
    %%Servo myservo(PA_8);
    Servo %<block.Identifier>(%<pinSrv>);
      %closefile tmpBuf
      %% SPI is in "Definitions" -> MAX6675 to "Declarations"
      %<LibSetSourceFileSection(modelC, "Declarations", tmpBuf)>
  %endif
  %%
%endfunction

%% Function: Outputs ======================================================
%%
%function Outputs(block, system) Output
%%breakpoint
    %if !SLibCodeGenForSim()
        %%assign pinSrv       = SFcnParamSettings.pinServo
        %%
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %%assign y1_val = LibBlockOutputSignal(0, "", "", 0) 
        %%
        %%myservo = p; // p=percent
        %%myservo.position(15); // Degree
        %%myservo.write(10); // percent
        %<block.Identifier>.position(%<u1_val>);
        %if !LibBlockOutputSignalIsExpr(0)
        %endif 
    %endif
  %%
%endfunction

%% Function: BlockOutputSignal ============================================
%%
%%function BlockOutputSignal(block,system,portIdx,ucv,lcv,idx,retType) void
  %%breakpoint
  %%assign p1_val = LibBlockParameter(p1, "", "", 0)
  %%assign p2_val = LibBlockParameter(p2, "", "", 0)
  %%assign u1_val = LibBlockInputSignal(0, "", "", 0)
  %%assign y1_val = LibBlockOutputSignal(0, "", "", 0)
  %%
  %%switch retType
    %%case "Signal"
      %%if portIdx == 0
        %%return "%<block.Identifier>.read_temp()"
      %%else
        %%assign errTxt = "Block output port index not supported: %<portIdx>"
        %%<LibBlockReportError(block,errTxt)>
      %%endif
    %%default
      %%assign errTxt = "Unsupported return type: %<retType>"
      %%<LibBlockReportError(block,errTxt)>
  %%endswitch
  %%
%%endfunction

%% [EOF]
